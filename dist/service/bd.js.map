{"version":3,"sources":["../../service/bd.js"],"names":["promise","require","options","promiseLib","pgp","connectionString","db","getSubjectsAndLectures","any","then","data","subjects","makeTreeViewSubjectsAndLectures","catch","err","console","error","currentSubjectId","length","subject_id","subject","getEmptySubject","i","lecture","push","subject_name","lecture_id","lecture_name","lectures"],"mappings":"AAAA;;AAEA,IAAMA,UAAUC,QAAQ,UAAR,CAAhB;;AAEA,IAAMC,UAAU;AACd;AACAC,cAAYH;AAFE,CAAhB;;AAKA,IAAII,MAAMH,QAAQ,YAAR,EAAsBC,OAAtB,CAAV;AACA,IAAIG,mBAAmB,mCAAvB;AACA,IAAIC,KAAKF,IAAIC,gBAAJ,CAAT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASE,sBAAT,GAAkC;AAChCD,KAAGE,GAAH,uLAI2CC,IAJ3C,CAIgD,UAASC,IAAT,EAAe;AAC7D;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAIC,WAAWC,gCAAgCF,IAAhC,CAAf;AACA;AACD,GAdD,EAcGG,KAdH,CAcS,UAASC,GAAT,EAAc;AACrBC,YAAQC,KAAR,CAAcF,GAAd;AACD,GAhBD;AAiBD;;AAEDP;;AAEA,SAASK,+BAAT,CAAyCF,IAAzC,EAA+C;AAC7C,MAAIO,mBAAmB,CAAC,CAAxB;AACA,MAAIP,KAAKQ,MAAL,KAAgB,CAApB,EAAuB;AACrBD,uBAAmBP,KAAK,CAAL,EAAQS,UAA3B;AACD,GAFD,MAEO;AACL,WAAO,EAAP;AACD;;AAED,MAAIR,WAAW,EAAf;AACA,MAAIS,UAAUC,iBAAd;;AAEA,OAAK,IAAIC,CAAT,IAAcZ,IAAd,EAAoB;AAClB,QAAIa,UAAU,EAAd;AACA,QAAIN,qBAAqBP,KAAKY,CAAL,EAAQH,UAAjC,EAA6C;AAC3CR,eAASa,IAAT,CAAcJ,OAAd;;AAEAA,gBAAUC,iBAAV;AACAJ,yBAAmBP,KAAKY,CAAL,EAAQH,UAA3B;AAED;AACDC,YAAQD,UAAR,GAAqBT,KAAKY,CAAL,EAAQH,UAA7B;AACAC,YAAQK,YAAR,GAAuBf,KAAKY,CAAL,EAAQG,YAA/B;;AAEAF,cAAU;AACRG,kBAAYhB,KAAKY,CAAL,EAAQI,UADZ;AAERC,oBAAcjB,KAAKY,CAAL,EAAQK;AAFd,KAAV;;AAKAP,YAAQQ,QAAR,CAAiBJ,IAAjB,CAAsBD,OAAtB;AACD;AACDZ,WAASa,IAAT,CAAcJ,OAAd;AACA,SAAOT,QAAP;AACD;;AAED,SAASU,eAAT,GAA2B;AACzB,SAAO;AACLF,gBAAY,CAAC,CADR;AAELM,kBAAc,EAFT;AAGLG,cAAU;AAHL,GAAP;AAKD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bd.js","sourcesContent":["'use strict';\n\nconst promise = require('bluebird');\n\nconst options = {\n  // Initialization Options\n  promiseLib: promise,\n};\n\nlet pgp = require('pg-promise')(options);\nlet connectionString = 'postgres://localhost:5432/testing';\nlet db = pgp(connectionString);\n\n// function getSubjectLectures() {\n//   db.any(`SELECT question_text, a2.answer_text correct_Answer, a.answer_text answer FROM questions q\n// JOIN questions_answers qa ON q.id = qa.questionid\n// JOIN answers a ON a.id = qa.answerid\n// JOIN answers a2 on q.answerid = a2.id;`)\n//   .then(function(data) {\n//     // res.status(200).json({\n//     //   status: 'success',\n//     //   data: data,\n//     //   message: 'Retrieved ALL puppies',\n//     // });\n//     console.log(JSON.stringify(data, null, 2));\n//\n//     let subjects = {}\n//\n//\n//   }).catch(function(err) {\n//     console.error(err);\n//   });\n// }\n//\n// getSubjectLectures();\n\nfunction getSubjectsAndLectures() {\n  db.any(`\n    SELECT s.id as subject_id, s.name as subject_name, \n           l.id as lecture_id, l.name as lecture_name \n    FROM subjects s\n    JOIN lectures l ON s.id = l.subjectid;`).then(function(data) {\n    // res.status(200).json({\n    //   status: 'success',\n    //   data: data,\n    //   message: 'Retrieved ALL puppies',\n    // });\n    // console.log(JSON.stringify(data, null, 2));\n\n    let subjects = makeTreeViewSubjectsAndLectures(data);\n    // console.log(JSON.stringify(subjects, null, 2));\n  }).catch(function(err) {\n    console.error(err);\n  });\n}\n\ngetSubjectsAndLectures();\n\nfunction makeTreeViewSubjectsAndLectures(data) {\n  let currentSubjectId = -1;\n  if (data.length !== 0) {\n    currentSubjectId = data[0].subject_id;\n  } else {\n    return [];\n  }\n\n  let subjects = [];\n  let subject = getEmptySubject();\n\n  for (let i in data) {\n    let lecture = {};\n    if (currentSubjectId !== data[i].subject_id) {\n      subjects.push(subject);\n\n      subject = getEmptySubject();\n      currentSubjectId = data[i].subject_id;\n\n    }\n    subject.subject_id = data[i].subject_id;\n    subject.subject_name = data[i].subject_name;\n\n    lecture = {\n      lecture_id: data[i].lecture_id,\n      lecture_name: data[i].lecture_name,\n    };\n\n    subject.lectures.push(lecture);\n  }\n  subjects.push(subject);\n  return subjects;\n}\n\nfunction getEmptySubject() {\n  return {\n    subject_id: -1,\n    subject_name: '',\n    lectures: [],\n  };\n}\n\n// const pg = require('pg');\n// const connectionString = process.env.DATABASE_URL ||\n//     'postgres://localhost:5432/testing';\n//\n// const client = new pg.Client(connectionString);\n// client.connect();\n// let query = client.query(`INSERT INTO \\\"user\\\" VALUES (DEFAULT, 'Фомичев Егор Андреевич', 'ИУ1-123');`);\n// query.on('end', () => {\n//     client.end();\n// });\n\n"]}