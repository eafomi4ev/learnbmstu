{"version":3,"sources":["../../service/bd.js"],"names":["promise","require","options","promiseLib","pgp","connectionString","db","GET_SUBJECTS_AND_LECTURES","getSubjectsAndLectures","any","then","data","subjects","makeTreeViewSubjectsAndLectures","console","log","JSON","stringify","catch","err","error","currentSubjectId","length","subject_id","subject","getEmptySubject","i","lecture","push","subject_name","lecture_id","lecture_name","lecture_path","lectures"],"mappings":"AAAA;;AAEA,IAAMA,UAAUC,QAAQ,UAAR,CAAhB;;AAEA,IAAMC,UAAU;AACd;AACAC,cAAYH;AAFE,CAAhB;;AAKA,IAAII,MAAMH,QAAQ,YAAR,EAAsBC,OAAtB,CAAV;AACA,IAAIG,mBAAmB,mCAAvB;AACA,IAAIC,KAAKF,IAAIC,gBAAJ,CAAT;;AAEA,IAAIE,+MAAJ;;AAKA,SAASC,sBAAT,GAAkC;AAChCF,KAAGG,GAAH,CAAOF,yBAAP,EAAkCG,IAAlC,CAAuC,UAASC,IAAT,EAAe;AACpD;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAIC,WAAWC,gCAAgCF,IAAhC,CAAf;AACAG,YAAQC,GAAR,CAAYC,KAAKC,SAAL,CAAeL,QAAf,EAAyB,IAAzB,EAA+B,CAA/B,CAAZ;AACD,GAVD,EAUGM,KAVH,CAUS,UAASC,GAAT,EAAc;AACrBL,YAAQM,KAAR,CAAcD,GAAd;AACD,GAZD;AAaD;;AAEDX;;AAEA,SAASK,+BAAT,CAAyCF,IAAzC,EAA+C;AAC7C,MAAIU,mBAAmB,CAAC,CAAxB;AACA,MAAIV,KAAKW,MAAL,KAAgB,CAApB,EAAuB;AACrBD,uBAAmBV,KAAK,CAAL,EAAQY,UAA3B;AACD,GAFD,MAEO;AACL,WAAO,EAAP;AACD;;AAED,MAAIX,WAAW,EAAf;AACA,MAAIY,UAAUC,iBAAd;;AAEA,OAAK,IAAIC,CAAT,IAAcf,IAAd,EAAoB;AAClB,QAAIgB,UAAU,EAAd;AACA,QAAIN,qBAAqBV,KAAKe,CAAL,EAAQH,UAAjC,EAA6C;AAC3CX,eAASgB,IAAT,CAAcJ,OAAd;;AAEAA,gBAAUC,iBAAV;AACAJ,yBAAmBV,KAAKe,CAAL,EAAQH,UAA3B;AAED;AACDC,YAAQD,UAAR,GAAqBZ,KAAKe,CAAL,EAAQH,UAA7B;AACAC,YAAQK,YAAR,GAAuBlB,KAAKe,CAAL,EAAQG,YAA/B;;AAEAF,cAAU;AACRG,kBAAYnB,KAAKe,CAAL,EAAQI,UADZ;AAERC,oBAAcpB,KAAKe,CAAL,EAAQK,YAFd;AAGRC,oBAAcrB,KAAKe,CAAL,EAAQM;AAHd,KAAV;;AAMAR,YAAQS,QAAR,CAAiBL,IAAjB,CAAsBD,OAAtB;AACD;AACDf,WAASgB,IAAT,CAAcJ,OAAd;AACA,SAAOZ,QAAP;AACD;;AAED,SAASa,eAAT,GAA2B;AACzB,SAAO;AACLF,gBAAY,CAAC,CADR;AAELM,kBAAc,EAFT;AAGLI,cAAU;AAHL,GAAP;AAKD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bd.js","sourcesContent":["'use strict';\n\nconst promise = require('bluebird');\n\nconst options = {\n  // Initialization Options\n  promiseLib: promise,\n};\n\nlet pgp = require('pg-promise')(options);\nlet connectionString = 'postgres://localhost:5432/testing';\nlet db = pgp(connectionString);\n\nlet GET_SUBJECTS_AND_LECTURES = `SELECT s.id as subject_id, s.name as Subject_Name, \nl.id as lecture_id, l.name as lecture_name, l.path as lecture_path \nFROM subjects s\nJOIN lectures l ON s.id = l.subjectid;`;\n\nfunction getSubjectsAndLectures() {\n  db.any(GET_SUBJECTS_AND_LECTURES).then(function(data) {\n    // res.status(200).json({\n    //   status: 'success',\n    //   data: data,\n    //   message: 'Retrieved ALL puppies',\n    // });\n    // console.log(JSON.stringify(data, null, 2));\n\n    let subjects = makeTreeViewSubjectsAndLectures(data);\n    console.log(JSON.stringify(subjects, null, 2));\n  }).catch(function(err) {\n    console.error(err);\n  });\n}\n\ngetSubjectsAndLectures();\n\nfunction makeTreeViewSubjectsAndLectures(data) {\n  let currentSubjectId = -1;\n  if (data.length !== 0) {\n    currentSubjectId = data[0].subject_id;\n  } else {\n    return [];\n  }\n\n  let subjects = [];\n  let subject = getEmptySubject();\n\n  for (let i in data) {\n    let lecture = {};\n    if (currentSubjectId !== data[i].subject_id) {\n      subjects.push(subject);\n\n      subject = getEmptySubject();\n      currentSubjectId = data[i].subject_id;\n\n    }\n    subject.subject_id = data[i].subject_id;\n    subject.subject_name = data[i].subject_name;\n\n    lecture = {\n      lecture_id: data[i].lecture_id,\n      lecture_name: data[i].lecture_name,\n      lecture_path: data[i].lecture_path,\n    };\n\n    subject.lectures.push(lecture);\n  }\n  subjects.push(subject);\n  return subjects;\n}\n\nfunction getEmptySubject() {\n  return {\n    subject_id: -1,\n    subject_name: '',\n    lectures: [],\n  };\n}\n\n// const pg = require('pg');\n// const connectionString = process.env.DATABASE_URL ||\n//     'postgres://localhost:5432/testing';\n//\n// const client = new pg.Client(connectionString);\n// client.connect();\n// let query = client.query(`INSERT INTO \\\"user\\\" VALUES (DEFAULT, 'Фомичев Егор Андреевич', 'ИУ1-123');`);\n// query.on('end', () => {\n//     client.end();\n// });\n\n"]}