{"version":3,"sources":["../server.js"],"names":["http","require","url","path","fs","mime","config","module","exports","createServer","req","res","pathname","decodeURI","parse","filename","slice","includes","statusCode","end","method","sendFile","get","filepath","join","receiveFile","deleteFile","size","writeStream","WriteStream","flags","on","chunk","length","console","log","setHeader","destroy","unlink","pipe","err","code","error","headersSent","writeHead","write","fileStream","createReadStream","lookup"],"mappings":"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","file":"server.js","sourcesContent":["'use strict';\n\nconst http = require('http');\nconst url = require('url');\nconst path = require('path');\nconst fs = require('fs');\nconst mime = require('mime');\nconst config = require('config');\n\nmodule.exports = http.createServer((req, res) => {\n\n  let pathname = decodeURI(url.parse(req.url).pathname);\n  let filename = pathname.slice(1); // /file.ext -> file.ext\n\n  if (filename.includes('/') || filename.includes('..')) {\n    res.statusCode = 400;\n    res.end('Nested paths are not allowed');\n    return;\n  }\n\n  if (req.method === 'GET') {\n    if (pathname === '/') {\n      sendFile(config.get('publicRoot') + '/index.html', res);\n    } else {\n      let filepath = path.join(config.get('filesRoot'), filename);\n      sendFile(filepath, res);\n    }\n  }\n\n  if (req.method === 'POST') {\n    if (!filename) {\n      res.statusCode = 404;\n      res.end('File not found');\n    }\n    receiveFile(path.join(config.get('filesRoot'), filename), req, res);\n  }\n\n  if (req.method === 'DELETE') {\n    deleteFile(path.join(config.get('filesRoot'), filename), req, res);\n  }\n\n});\n\nfunction receiveFile(filepath, req, res) {\n\n  // non-streaming client sends this\n  // if (req.headers['content-length'] > config.get('limitFileSize')) {\n  //   res.statusCode = 413;\n  //   res.end('File is too big!');\n  //   return;\n  // }\n\n  let size = 0;\n\n  let writeStream = new fs.WriteStream(filepath, {flags: 'wx'});\n\n  /*\n   let emit = req.emit;\n   req.emit = function(e) {\n   console.log(e);\n   return emit.apply(this, arguments);\n   };*/\n\n  req.on('data', (chunk) => {\n\n    size += chunk.length;\n    console.log('data');\n    if (size > config.get('limitFileSize')) {\n\n      // early connection close before recieving the full request\n      console.log('too big!');\n      res.statusCode = 413;\n\n      // if we just res.end w/o connection close, browser may keep on sending\n      // the file\n      // the connection will be kept alive, and the browser will hang (trying\n      // to send more data)\n      // this header tells node to close the connection\n      // also see http://stackoverflow.com/questions/18367824/how-to-cancel-http-upload-from-data-events/18370751#18370751\n      res.setHeader('Connection', 'close');\n\n      // Some browsers will handle this as 'CONNECTION RESET' error\n      res.end('File is too big!');\n\n      writeStream.destroy();\n      fs.unlink(filepath, err => { // eslint-disable-line\n        /* ignore error */\n      });\n\n    }\n\n  }).on('close', () => {\n    writeStream.destroy();\n    fs.unlink(filepath, err => { // eslint-disable-line\n      /* ignore error */\n    });\n  }).pipe(writeStream);\n\n  writeStream.on('error', (err) => {\n\n    if (err.code === 'EEXIST') {\n      res.statusCode = 409;\n      res.end('File exists');\n    } else {\n      console.error(err);\n\n      if (!res.headersSent) {\n        res.writeHead(500, {'Connection': 'close'});\n        res.write('Internal error');\n      }\n\n      fs.unlink(filepath, err => { // eslint-disable-line\n        /* ignore error */\n        res.end();\n      });\n\n    }\n\n  }).on('close', () => {\n\n    // Note: can't use on('finish')\n    // finish = data flushed, for zero files happens immediately,\n    // even before 'file exists' check\n\n    // for zero files the event sequence may be:\n    //   finish -> error\n\n    // we must use 'close' event to track if the file has really\n    // been written down\n    res.end('OK');\n  });\n\n  res.on('finish', () => console.log('finish'));\n\n  /*\n   let emit = writeStream.emit;\n   writeStream.emit = function(event) {\n   console.log(event);\n   return emit.apply(ctx, arguments);\n   };\n   */\n}\n\nfunction sendFile(filepath, res) {\n  let fileStream = fs.createReadStream(filepath);\n  fileStream.pipe(res);\n\n  fileStream.on('error', (err) => {\n    if (err.code === 'ENOENT') {\n      res.statusCode = 404;\n      res.end('Not found');\n    } else {\n      console.error(err);\n      if (!res.headersSent) {\n        res.statusCode = 500;\n        res.end('Internal error');\n      } else {\n        res.end();\n      }\n    }\n\n  }).on('open', () => {\n    res.setHeader('Content-Type', mime.lookup(filepath));\n  });\n\n  res.on('close', () => {\n    fileStream.destroy();\n  });\n\n}\n\nfunction deleteFile(filepath, req, res) {\n  fs.unlink(filepath, function(err) {\n    if (err) {\n      res.statusCode = 404;\n      res.end('Not found');\n      return;\n    }\n    res.statusCode = 200;\n    res.end('File `filepath` successfully deleted.');\n    console.log('File `filepath` successfully deleted.');\n  });\n}\n"]}