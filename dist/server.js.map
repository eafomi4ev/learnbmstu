{"version":3,"sources":["../server.js"],"names":["http","require","url","path","fs","mime","config","router","module","exports","createServer","req","res","pathname","decodeURI","parse","route","receiveFile","filepath","size","writeStream","WriteStream","flags","on","chunk","length","console","log","get","statusCode","setHeader","end","destroy","unlink","pipe","err","code","error","headersSent","writeHead","write","sendFile","fileStream","createReadStream","lookup","deleteFile"],"mappings":"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","file":"server.js","sourcesContent":["'use strict';\n\nconst http = require('http');\nconst url = require('url');\nconst path = require('path');\nconst fs = require('fs');\nconst mime = require('mime');\nconst config = require('config');\nconst router = require('./router');\n\nmodule.exports = http.createServer((req, res) => {\n\n  let pathname = decodeURI(url.parse(req.url).pathname);\n\n  router.route(pathname);\n\n  // let filename = pathname.slice(1); // /file.ext -> file.ext\n  //\n  // if (filename.includes('/') || filename.includes('..')) {\n  //   res.statusCode = 400;\n  //   res.end('Nested paths are not allowed');\n  //   return;\n  // }\n  //\n  // if (req.method === 'GET') {\n  //   if (pathname === '/') {\n  //     sendFile(config.get('publicRoot') + '/index.html', res);\n  //   } else {\n  //     let filepath = path.join(config.get('filesRoot'), filename);\n  //     sendFile(filepath, res);\n  //   }\n  // }\n  //\n  // if (req.method === 'POST') {\n  //   if (!filename) {\n  //     res.statusCode = 404;\n  //     res.end('File not found');\n  //   }\n  //   receiveFile(path.join(config.get('filesRoot'), filename), req, res);\n  // }\n  //\n  // if (req.method === 'DELETE') {\n  //   deleteFile(path.join(config.get('filesRoot'), filename), req, res);\n  // }\n\n});\n\nfunction receiveFile(filepath, req, res) {\n\n  // non-streaming client sends this\n  // if (req.headers['content-length'] > config.get('limitFileSize')) {\n  //   res.statusCode = 413;\n  //   res.end('File is too big!');\n  //   return;\n  // }\n\n  let size = 0;\n\n  let writeStream = new fs.WriteStream(filepath, {flags: 'wx'});\n\n  /*\n   let emit = req.emit;\n   req.emit = function(e) {\n   console.log(e);\n   return emit.apply(this, arguments);\n   };*/\n\n  req.on('data', (chunk) => {\n\n    size += chunk.length;\n    console.log('data');\n    if (size > config.get('limitFileSize')) {\n\n      // early connection close before recieving the full request\n      console.log('too big!');\n      res.statusCode = 413;\n\n      // if we just res.end w/o connection close, browser may keep on sending\n      // the file\n      // the connection will be kept alive, and the browser will hang (trying\n      // to send more data)\n      // this header tells node to close the connection\n      // also see http://stackoverflow.com/questions/18367824/how-to-cancel-http-upload-from-data-events/18370751#18370751\n      res.setHeader('Connection', 'close');\n\n      // Some browsers will handle this as 'CONNECTION RESET' error\n      res.end('File is too big!');\n\n      writeStream.destroy();\n      fs.unlink(filepath, err => { // eslint-disable-line\n        /* ignore error */\n      });\n\n    }\n\n  }).on('close', () => {\n    writeStream.destroy();\n    fs.unlink(filepath, err => { // eslint-disable-line\n      /* ignore error */\n    });\n  }).pipe(writeStream);\n\n  writeStream.on('error', (err) => {\n\n    if (err.code === 'EEXIST') {\n      res.statusCode = 409;\n      res.end('File exists');\n    } else {\n      console.error(err);\n\n      if (!res.headersSent) {\n        res.writeHead(500, {'Connection': 'close'});\n        res.write('Internal error');\n      }\n\n      fs.unlink(filepath, err => { // eslint-disable-line\n        /* ignore error */\n        res.end();\n      });\n\n    }\n\n  }).on('close', () => {\n\n    // Note: can't use on('finish')\n    // finish = data flushed, for zero files happens immediately,\n    // even before 'file exists' check\n\n    // for zero files the event sequence may be:\n    //   finish -> error\n\n    // we must use 'close' event to track if the file has really\n    // been written down\n    res.end('OK');\n  });\n\n  res.on('finish', () => console.log('finish'));\n\n  /*\n   let emit = writeStream.emit;\n   writeStream.emit = function(event) {\n   console.log(event);\n   return emit.apply(ctx, arguments);\n   };\n   */\n}\n\nfunction sendFile(filepath, res) {\n  let fileStream = fs.createReadStream(filepath);\n  fileStream.pipe(res);\n\n  fileStream.on('error', (err) => {\n    if (err.code === 'ENOENT') {\n      res.statusCode = 404;\n      res.end('Not found');\n    } else {\n      console.error(err);\n      if (!res.headersSent) {\n        res.statusCode = 500;\n        res.end('Internal error');\n      } else {\n        res.end();\n      }\n    }\n\n  }).on('open', () => {\n    res.setHeader('Content-Type', mime.lookup(filepath));\n  });\n\n  res.on('close', () => {\n    fileStream.destroy();\n  });\n\n}\n\nfunction deleteFile(filepath, req, res) {\n  fs.unlink(filepath, function(err) {\n    if (err) {\n      res.statusCode = 404;\n      res.end('Not found');\n      return;\n    }\n    res.statusCode = 200;\n    res.end('File `filepath` successfully deleted.');\n    console.log('File `filepath` successfully deleted.');\n  });\n}\n"]}